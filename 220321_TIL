오늘 목표
1. c++ 강의 완독 및 레포트 제출
2. 돈의 속성 30p 읽기

객체지향 2-2 이론
변수의 선언
형식 type variable_list;
변수명 작성 규칙
1. 영문자, 숫자, _ 사용 가능
2. 반드시 ' ' 또는 알파벳 영문자로 시작해야 한다
3. 예약어 사용 불가
4. 중간에 공백을 쓸 수 없다.
5. 특수문자 사용 불가
6. 대문자와 소문자를 구별

사용 예
int i, j;
char ch;
float f, balance;
double d;

변수의 선언 위치에 따른 구분
지역 변수 : 함수 내
형식 매개변수 : 함수 매개변수의 정의 부분
전역 변수 : 모든 함수의 외부

지역 변수
*함수 내에 선언되는 변수
*생성시기: 함수가 호출될 때
*소멸 시기: 함수가 사라질 때
*지역 변수는 함수 호출들 사이에서 자신의 값을 유지하지 않음
*동적 변수(dynamic variable) 또는 자동 변수(automatic variable)라 부름

형식 매개변수
*매개변수의 선언은 함수 이름 다음에 오며 괄호 안에 있다
*매개변수의 자료형 파악
*매개변수들은 함수로 전달되는 정보를 받는다
*지역 변수로써 함수 내에서 사용됨

전역 변수
*프로그램이 끝날 때까지 값을 유지
*모든 함수의 외부에 선언
*어떠한 함수에서도 접근 가능
*프로그램의 맨 앞에 전역 변수를 선언하는 것이 좋다

형 수정자
*기본 자료형의 의미를 수정하여 그 자료형이 다양한 상황의 요구에 좀 더 정확히 맞도록 하기 위해 사용
*char, int, double 자료형 앞에 수정자(modifier)를 붙일 수 있다.
종류
signed-부호가 있는 정수
unsigned-포인트 같은 부호가 없는 정수
long
short

리터럴
*프로그램에 의해 변경될 수 없는 고정된 값
*상수(constant)라고도 함
*종류
1.문자형ch='Z'; wc=L'A';= 긴 문자 리터럴은 문자 앞에 L을 쓴다. but 취급 x 
2.정수형:소수 부분이 ㅇ벗는 수
3.부동소수형:소수점과 그 뒤에 소수 부분이 있는 수
4.16진수와 8진수 리터럴 
hex=0xFF; //10진수로 255
oct=011; //10진수로 9
5.문자열 리터럴: "this is a test"
*주의: 문자열과 문자들을 혼동해서는 안된다.

리터럴의 크기 결정 방법
*C++ 컴파일러에 의한 잠정적인 결정
-정수는 int에서부터 시작해서 그 정수를 저장할 수 있는 가장 작은 자료형
-부동소수형은 double
*사용자의 명시적인 형선언
-숫자인 경우 *접미사를 사용 *상속값 뒤에 문자를 두는 것

연산자(operator)
*컴파일러에게 특정한 수학적 또는 논리적 연산을 수행할 것을 말해주는 기호
*종류
1.산술
2.관계 및 논리
3.비트 연산자

식
*식에서의 형 변환
-서로 다른 형의 리터럴과 변수가 식에 섞여 있을 때 이들은 같은 형으로 변환
-정수형 승진
모두 char와 short int 값은 자동적으로 int로 변환
-형 승진
모든 피연산자들은 가장 큰 피연산자의 형으로 변환
-bool로의 상호 변환
bool형의 값은 정수형 식에서 자동으로 정수 0 또는 1로 변환

형 변환자
*어떤 식을 형 변환자(cast)를 사용하여 강제로 특정한 형이 되도록 하는 것
*연산자로서 변환자는 단항 연산자이며 다른 단항 연산자와 같은 우선 순위를 갖는다
*형식 (type) expression
*예 (float) x / 2

객체지향 3-1 이론
if문
*조건 식이 참이면 if 뒤의 실행문 또는 실행문 블록을 실행하고
그렇지 않다면 else 뒤의 실행문 블록이 실행될 것이다
*형식
if(expression) statement;
else statement;

조건식
*식의 유형이 관계와 논리 연산자만이 아니라, 참 또는 거짓의 결과로 계산되면 된다.
-0의 값은 자동으로 false로 변환되고, 0이 아닌 모든 값은 true로 변환된다

if-else-if 구조
*조건식은 위에서 아래 방향으로 계산된다.
*참 조건을 만나자마자 그것과 관련된 문장이 실행되고 나머지 부분은 통과된다.
*조건들 중의 하나도 참이 아니라면 마지막 else 문이 실행된다.

for 반복문
*조건이 만족하는 동안 지정된 횟수를 반복 실행
*형식
for(initialization; expression; increment) statement;
*사용 변수의 역할
-초기화(initialization):반복 제어 변수에 초기값을 설정 
-식(expression):반복을 계속 할 것인가를 결정하는 조건식
-증가연산(increment):반복 제어 변수의 증감값

for 반복문의 변형
*콤마는 초기화 문장을 구분하고 증가 연산 문장을 구분한다.
*실용적인 면에서 두 개 또는 세 개 이상은 for반복문을 이해하기 어렵게 만든다.
예)
for(x=,y=10; x<=10; ++x, --y)
    cout << x << ' ' << y << '\n';

kbhit()
*사용자가 키보드에서 하나의 키를 누를 때까지 대기
*헤더 파일 conio.h를 사용

생략되는 부분
*증가연산 부분의 생략
*초기값 치환 부분의 생략
*무한반복 for(;;)

범위기반 for 반복문
for ( auto 변수 : 배열이름 ) //일반 변수
    반복할 실행문;
또는
for ( auto & 변수 : 배열이름 ) //참조형 변수
    반복할 실행문;

switch문
*다중 선택문
*switch 문의 식ㅇ느 문자 또는 정수 값으로 계산되어야만 한다.
*default의 실행문들은 어느 것도 일치하지 않으면 수행된다
*16,384 개의 case 문을 가질 수 있다

break문
*break를 만날 때 프로그램의 흐름은 전체 switch 문에서 빠져나가서 switch 밖의 다음 문장에서 계속
*만일 break 문이 없다면 case 안에 있는 모든 문자등과 그 다음 case등에 있는 실행문들이 break를 만날 때까지 
(또는 switch의 끝까지) 실행

while 반복문
*형식
while(식) statement;

do-while 반복문
*do-while 반복문은 반복의 끝에서 조건 확인
*항상 적어도 한번은 실행된다
*조건식이 참일 동안 계속 실행
do{
    statements;
}while(expression);

continue 문
*continue문은 자신과 반복을 제어하는 조건식 사이의 명령문을 생략하고 다음 반복으로 넘어가게 한다
*while과 do-while에서의 흐름은 직접 조건식으로 보내고, 그 다음 반복 과정을 계속한다
*for의 경우, 반복문의 증가연산이 수행되며, 조건식이 실행되고 반복이 계속 된다.
